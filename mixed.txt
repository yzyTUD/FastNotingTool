	DCMTK is a collection of libraries and applications implementing large parts the DICOM standard.
	It includes software for examining, constructing and converting DICOM image files, handling offline media, sending and receiving images over a network connection
	DCMTK is is written in a mixture of ANSI C and C++.
	It comes in complete source code and is made available as "open source" software.
	On 2019-10-28, a new version of the DCMTK was released
	numerous DICOM demonstrations to provide central, vendor-independent image storage and worklist servers (CTNs - Central Test Nodes).
	being a building block for research projects, prototypes and commercial products.
	It is used by hospitals and companies all over the world for a wide variety of purposes ranging from
	can be compiled under Windows and a wide range of Unix operating systems
	Quick installation
	choco install dcmtk
	fink install dcmtk
	sudo apt install dcmtk
	Minor Releases	
	Major Releases
	Major releases are more extensively tested and validated.
	This is reflected in a longer feature freeze phase and more manual tests.
	DCMTK are published only rarely because of the significant quality assurance effort required to fulfil users' expectations of a stable release
	If you would like to see a new major release including the latest DCMTK features, sponsorship for our small development team might be an option
	DCMTK Documentation
	https://support.dcmtk.org/docs/index.html
	a set of software libraries and applications implementing part of the DICOM/MEDICOM Standard.
	Each sub-directory (except config) contains further sub-directories for application source code (apps), library source code (libsrc)
	dcmimgle: an image processing library and utility apps
	dcmimage: adds support for color images to dcmimgle
	dcmjpeg: a compression/decompression library and utility apps
	dcmtls: security extensions for the network library
	oflog: a logging library based on log4cplus
	command line tools:
	dcm2pnm: Convert DICOM images to PGM/PPM, PNG, TIFF or BMP
	dcmquant: Convert DICOM color images to palette color
	dcmscale: Scale DICOM images
	8 /* bits per sample */
	delete image;
	https://support.dcmtk.org/docs/dcm2pnm.html
	This utility only supports uncompressed and RLE compressed DICOM images.
	RLE compressed
	also supports a number of JPEG compression schemes.
	traditional volume rendering (left) and cinematic rendering (right)
	Cinematic rendering provides more shape cues
	DICOM for VTK
	https://github.com/Kitware/VTK.git
	D:\testbed_framework_all\VTK\build
	软件架构师是一位具有一定技术、产品、项目和团队等管理能力的高级程序员（编程高手），通常是一个开发团队里面技术最牛（或者比较牛）的少数几个人之一。
	软件架构师是一位具有一定技术、产品、项目和团队等管理能力的高级程序员（编程高手），通常是一个开发团队里面技术最牛（或者比较牛）的少数几个人之一。
	或者比较牛）的少数几个人之一
	架构师自身的技术水平和管理水平不行，常常会把团队带沟里，重要性可想而知。
	单纯看工作年限，一般 3-5 年可成为初级架构师，5-8 年可成为中级架构师，8-10 年以上可成为高级软件架构师
	顾名思义，要负责整个系统的架构，尤其是涉及到一个系统（或子系统）全局的整体设计，所以往往需要高层、上层（high-level）的战略（strategic）层面的思考
	对代码、模块、子系统和系统中的各种静态结构、关系和动态行为、交互等等进行抽象。
	所以，在架构师的日常工作中，经常看到各种各样的图表、图形符号和模型，是很正常的。
	软件开发、软件工程必然离不开的四门基本功课（四项基本活动或任务）
	把这四项活动连起来正好组成一个菱形，所以我也把它们叫作“编程之钻”（The Programming Diamond）。
	需求分析
	测试验证
	调试纠错
	这四个基本动作正好构成一个功能开发的小循环，也是每个程序员日常工作的标准核心动作。
	国内许多码农的开发效率低、质量不高，是因为他们往往在 Coding、Debugging 上花去了大量时间（人称 code-and-fix）
	许多人不知道怎么有效率、高质量地去做需求分析、自动测试、架构设计以及调试除错，以为只有 Coding
	忽视了其他的软件工程关键实践，于是导致个人整体的开发速度和质量降低，老是提不上去。
	因为一方面“软件工程无用论”长期存在，加上浮躁和急功近利的社会风气，影响了人们的观念和意识
	导致追求短平快、糙快猛
	而另一方面仅通过大学短短的四年，常常很难全面、扎实地学到并掌握“编程之钻”的关键技术
	而工作以后又常常忙于加班应付、各种赶工期，缺少足够的时间来学习提高自己的开发水平。
	视野开阔，知道可以直接用哪个开源项目来满足这样那样的需求
	视野窄的架构师会放着捷径不走，不断让团队重复造轮子，直至把项目拖死。
	如果你不能参与到一个大型项目中，学习是没用的。很遗憾，就是这么残酷。
	这不是参与一些开源项目，或者看一些别人的经验能解决的，站在外面，你能看到的永远是一个个局部
	最好全栈，做app你要懂app与服务端的交互，做web你要懂ajax，这样你才能设计好服务接口。
	核心的技术要把控到源码级别，这表示你可以直接看到本质，这表示你的决策更加快速与准确，优化也更加及时，项目生命周期中的多出风险都能很好的把控。
	你要懂设计模式，要懂重构，你会写漂亮代码，但是更重要的是你会写简单代码，不必过度封装
	代码质量非常重要，其中很关键的是代码的可理解性，这对项目后续的开发与维护起到十分重要的作用。
	简单东西简单写（没模式没规范）
	复杂东西简单写（把控本质）
	好的开源项目要用，加快项目进度，不行的话就自己造一个轮子，反正我已经造了一个
	其中常常是技术最牛的人做架构师（或TL）。所以，架构师在广大码农中的占比大概平均不到 10%。
	接触不到足够量的全局，你是无法了解什么是架构的。
	普通程序员，也无法理解，他编的一个功能，到底在最后整体架构当中有什么作用。
	仅仅跑上一两个微服务做个react app的小公司可能不会特别关心架构
	和鬼火少年没什么区别，都在裸奔
	一个宕机或者主程删库就能干掉一家这样的公司。
	模块解耦
	提到一个名词，叫“PPT架构师
	任何一门编程语言都有很多坑。花两天时间学会语法，会查api了，算是入门了
	一个不了解坑的位置的架构师只会为团队挖更多的坑
	并掌握多种参考构架、主要的可重用构架机制和模式（例如J2EE架构等
	具备系统设计员的所有技能，但涉及面更广、抽象级别更高
	拥有优秀的沟通能力，用以进行说服、鼓励和指导等活动，并赢得项目成员的信任；
	・必修课程：软件系统建模和分析概论（2个单元）、系统分析基础（3个单元）、用户需求的分析和文档化（3个单元）、软件架构项目（3个单元）。
	分别是软件架构师、ATAM评估师和ATAM主任评估师。这些认证都需要学习2年的课程
	我现在公司的技术选型基本算是失败。。。
	一个电商系统，包括供应商系统、内部管理系统、门户三大块。
	门户因为要做服务端渲染，所以多方对比之后选了react加webpack加typescript的方案。
	所以就决定用react写组件，其他平台用angular调用react组件。
	然后就出现坑了。
	由于前端人员水平参差不齐，根据基础组件库开发的业务组件简直惨不忍睹，维护起来又是很大一笔成本开销。
	搞这些之前，首先要正确评估下团队的接受能力，
	技术选型如何选择？
	先前都是用的原生开发的，但是开发成本较大，目前想采用跨平台的方式开发
	产品的方向是在线教育平台应用，本人目前是J2EE方向，这方面的接触比较少
	目前看到比较多的一些框架大致有下面这些：appcan、apicloud、phonegap、WeX5，和MUI等等一些
	因为不是很熟悉，对于整个技术的选型不知道怎么去选择，然后还有一些js，比如选择了上面这些，然后还需要使用Vue.js
	有些公司迫于竞争，想要更迅速的更省成本的进行开发，就不再满足Android端一套代码，iOS端一套代码
	跨平台技术应运而生，并且开始在公司中生根发芽。
	Android和iOS生态太大了，我们可以把它们比作第一级生态，想要颠覆这两个系统的曾经出现过，但都失败了
	因此建立次级生态是最稳妥的策略
	微信小程序的主要开发语言是 JavaScript ，小程序的开发同普通的网页开发相比有很大的相似性。 小程序的运行环境分成渲染层和逻辑层
	原有的PMS酒店管理系统是CS模式，各分店单独部署，数据汇总到集团数据中心，目前需要采用BS+J2EE重建
	新组建的团队，目前处于技术预研框架选型阶段（综合考虑SOA架构，以及适应集团O2O发展方向).各位前辈有哪些架构、技术框架推介？ 关注者 51 被浏览 
	各位前辈有哪些架构、技术框架推介
	java常见的技术架构选型，前面已经有很多人谈到过 ，选择成熟轻量的为主。
	如果你们门店那么多，每个门店都需要单独的业务系统的话，数据层的架构才是你重点需要关注的。比如说如何部署分布式数据库，如何高效的处理数据通信
	那么采用快糙猛的技术快速把它搭建起来，也未尝不可

	---
	
	按照项目，将同一个项目的所有数据都放在一个文件夹下面。
	在这个项目下，针对每一个要说明的问题，建立子文件夹
	Git的优势
	协同开发
	由
	Git 是由“Linux之父” Linus Torvalds 创建的。因为他发现找不到满意的方案来管理 Linux Kernel 联合开发的版本控制，就自己写了 Git。
	协同开发
	开发者认为自己提交的代码有问题？没关系，因为版本库是自己的，回滚历史、反复提交、归并分支并不会影响到其他开发者。
	 联合开发
	git对于每个工程只会产生一个.git目录，这个工程所有的版本控制信息都在这个目录中，不会像SVN那样在每个目录下都产生.svn目录
	支持快速切换分支方便合并，比较合并性能好。在同一目录下即可切换不同的分支，方便合并，且合并文件速度比SVN快。
	如果正在使用svn，打算换到git，又暂时不想放弃已有的svn代码库，可以选择git-svn，具体方法参加如何在svn系统中使用git。
	比如自己在电脑上修改了文件A，别人也修改了文件A，此时，需要把两人之间各自所做的修改推送给对方，就可以互相看到对方所做的修改了。
	https://blog.csdn.net/qq_33316091/article/details/82414389?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-4&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-4
	Id_ras是私匙，不能泄露出去，id_rsa.pub是公匙，可以放心地告诉任何人。
	不用压缩
	可以看到提交历史
